#+TITLE: Processor

This document is for the 24bit voice processor.

* Features

- Works at over 50MHz
- Serial execution of multiple voices.
- Each voice can have completely different
- 1 cycle execution for osillators, enveloppes, filters
- 2 cycle execution of commands with immediate values

* Intruction Set

The 24bit instruction is made of

- 3..0: The ALU Mux position
  |---+--------------------------------------------------------|
  | 0 | Oscillator (W <= OscillatorType[R2](R1))               |
  | 1 | Enveloppe Type ADS (R2 is Param, R1 is current sample) |
  | 2 | Enveloppe Type R (R1 is the midi)                      |
  | 3 | Add instruction (W <= R1 + R2)                         |
  | 4 | Mul instruction (High part of mult) (W <= R1 * R2)     |
  | 5 | Mov instruction (W <= R1)                              |
  | 6 | Midi Note to freq (W <= to_freq_step(R1) * R2)         |
  | 7 | Shr instruction (W <= R1 >> R2)                        |
  | 8 | Sub instruction (W <= R1 - R2)                         |
  | 9 | Shr instruction (W <= R1 - R2)                         |
  | A | And instruction (W <= R1 & R2)                         |
  | B | Lowpass Filter (W <= Filter(W, freq=R1, q=R2))         |
  | C | Mul instruction (Low part of mult) (W <= R1 * R2)      |
  |   | Others (W <= 0)                                        |
  |---+--------------------------------------------------------|
- 7..4: Register 1 Selection
  In register mode, this is the register ID. In special mode, it is:
  |---+------------------------------------------------------------|
  | 0 | Next Instruction                                           |
  | 1 | Sample counter since Note Down                             |
  | 2 | Midi Note Down (bit 7 is cleared if key has been released) |
  | 3 | Midi Velocity                                              |
  | 4 | Mod wheel                                                  |
  | 5 |                                                            |
  | 6 |                                                            |
  | 7 | Constant 12 (Midi octave)                                  |
  | 8 | Constant 0                                                 |
  | 9 | Constant 1                                                 |
  | A | Constant 2                                                 |
  | B | Constant 3                                                 |
  | C | Constant 4                                                 |
  | D | Constant 5                                                 |
  | E | Constant 6                                                 |
  | F | Constant 7                                                 |
  |---+------------------------------------------------------------|
- 11..8: Register 2 Selection
- 15..12: Write register selection
- 16: Register 1 special mode
- 17: Register 2 special mode
- 18..20: Execution condition
  |---+-------------------------|
  | 0 | Execute                 |
  | 1 | Execute if Zero         |
  | 2 | Execute if > 0          |
  | 3 | Execute if >= 0         |
  | 4 | Execute if != 0         |
  | 5 | Execute if < 0          |
  | 6 | Execute if <= 0         |
  | 7 | Execute and Write Flags |
  |---+-------------------------|
- 21: Unused
- 22: Skip next instruction flag. Don't execute the next instruction
- 23: Stop execution


* Instruction memory

Instruction memory is expected to have 1 cycle of latency

* Enveloppe

The enveloppe instruction takes 4x6bits parameters in its R2 Register.
- 23..18 : Step for Attack, the higher the shorter the attack. (0 to 63)
  Time of attack is: $ 131072 / (a^2) $ samples. So the possible attack
  times are from $0.75ms$ to $2.97s$.
- 17..12 : Number of blocks of 64 samples before delay. 0 to 63 squared.
  Thus the times are between $1ms$ and $5.9s$
- 11..6 : Step for Sustain.
- 5..0 : Level of sustain


* Example program

#+CAPTION: Simple oscillator
|----------------+-------------------+--------------------------------------------------|
| ASM            |       Instruction | Description                                      |
|----------------+-------------------+--------------------------------------------------|
| MIDI           |          0x03F126 | Perform a index lookup for the current midi note |
| R1 := 1        | 0x401005 0x000001 | Immediate load 1 (Square Oscillator Type)        |
| OSC RF, R1, RF |          0x00F1F0 | Run the oscillator                               |
|----------------+-------------------+--------------------------------------------------|

#+CAPTION: IIR Filtering
|-----------------+-------------------+---------------------------------------------------|
| ASM             |       Instruction | Description                                       |
|-----------------+-------------------+---------------------------------------------------|
|                 |                   | (Sample to filter is in RE, last sample is in RF) |
| SHL RA, MOD, 17 | 0x43A049 0x000011 | Get the filter coefficient from Modwheel          |
| SUB RB, 0, RA   |          0x01BA88 |                                                   |
| MUL RF, RF, RA  |          0x00FAF4 | Perform filter (y = (1-C) y + C x)                |
| MUL RE, RE, RB  |          0x00EBE4 |                                                   |
| ADD RF, RE, RF  |          0x00FEF3 |                                                   |
|-----------------+-------------------+---------------------------------------------------|
